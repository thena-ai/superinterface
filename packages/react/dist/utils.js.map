{"version":3,"sources":["/Users/ankit/superinterface/packages/react/dist/utils.js","../src/lib/optimistic/optimisticId.ts","../src/lib/optimistic/isOptimistic.ts","../src/lib/runSteps/serializeRunStep.ts","../src/lib/messages/serializeMessage.ts","../src/lib/threadIdStorage/key.ts","../src/lib/streams/enqueueJson.ts"],"names":["uid","optimisticId","concat","_","isOptimistic","_ref","id","startsWith","pick","serializeRunStep","runStep","serializeMessage","_message$runSteps","message","role","created_at","content","run_id","assistant_id","thread_id","attachments","metadata","runSteps","map","status","key","assistantId","enqueueJson","controller","value","enqueue","TextEncoder","encode","JSON","stringify","threadIdStorageKey"],"mappings":"AAAA,qCAAqC;ACArC,SAASA,GAAA,QAAW,SAAA;AACb,IAAIC,eAAe;WAAM,IAAIC,MAAA,CAAOF,IAAI;;ADG/C,qCAAqC;AEJrC,OAAOG,OAAO,SAAA;AACP,IAAIC,eAAe,SAAAC;IACxB,IAAI,AACFC,KACED,KADFC;IAEF,OAAOH,EAAEI,UAAA,CAAWD,IAAI;AAC1B;AFOA,uCAAuC;AGbvC,SAASE,IAAA,QAAY,SAAA;AACd,IAAIC,mBAAmB,SAAAJ;IAC5B,IAAI,AACFK,UACEL,KADFK;IAEF,OAAOF,KAAKE,SAAS;QAAC;QAAM;QAAU;QAAgB;QAAgB;QAAgB;QAAa;KAAS;AAC9G;AHgBA,uCAAuC;AIrBhC,IAAIC,mBAAmB,SAAAN;IAC5B,IAAIO;IACJ,IAAI,AACFC,UACER,KADFQ;IAEF,OAAO;QACLP,IAAIO,QAAQP,EAAA;QACZQ,MAAMD,QAAQC,IAAA;QACdC,YAAYF,QAAQE,UAAA;QACpBC,SAASH,QAAQG,OAAA;QACjBC,QAAQJ,QAAQI,MAAA;QAChBC,cAAcL,QAAQK,YAAA;QACtBC,WAAWN,QAAQM,SAAA;QACnBC,aAAaP,QAAQO,WAAA;QACrBC,UAAUR,QAAQQ,QAAA;QAClBC,UAAA,CAAA,AAAYV,CAAAA,oBAAoBC,QAAQS,QAAA,MAAc,QAAQV,sBAAsB,KAAA,IAASA,oBAAoB,EAAC,EAAGW,GAAA,CAAI,SAAAb;mBAAWD,iBAAiB;gBACnJC,SAAAA;YACF;;QACAc,QAAQX,QAAQW,MAAA;IAClB;AACF;AJwBA,iCAAiC;AK7C1B,IAAIC,MAAM,SAAApB;IACf,IAAI,AACFqB,cACErB,KADFqB;IAEF,OAAO,kBAAkBxB,MAAA,CAAOwB,aAAa;AAC/C;ALgDA,iCAAiC;AMrD1B,IAAIC,cAAc,SAAAtB;IACvB,IACEuB,aAEEvB,KAFFuB,YACAC,QACExB,KADFwB;IAEF,OAAOD,WAAWE,OAAA,CAAQ,IAAIC,cAAcC,MAAA,CAAOC,KAAKC,SAAA,CAAUL;AACpE;ANuDA,SACEF,WAAW,EACXvB,YAAY,EACZH,YAAY,EACZU,gBAAgB,EAChBc,OAAOU,kBAAkB,GACzB","sourcesContent":["// src/lib/optimistic/optimisticId.ts\nimport { uid } from \"radash\";\nvar optimisticId = () => \"-\".concat(uid(24));\n\n// src/lib/optimistic/isOptimistic.ts\nimport _ from \"lodash\";\nvar isOptimistic = (_ref) => {\n  var {\n    id\n  } = _ref;\n  return _.startsWith(id, \"-\");\n};\n\n// src/lib/runSteps/serializeRunStep.ts\nimport { pick } from \"radash\";\nvar serializeRunStep = (_ref) => {\n  var {\n    runStep\n  } = _ref;\n  return pick(runStep, [\"id\", \"run_id\", \"step_details\", \"completed_at\", \"cancelled_at\", \"failed_at\", \"status\"]);\n};\n\n// src/lib/messages/serializeMessage.ts\nvar serializeMessage = (_ref) => {\n  var _message$runSteps;\n  var {\n    message\n  } = _ref;\n  return {\n    id: message.id,\n    role: message.role,\n    created_at: message.created_at,\n    content: message.content,\n    run_id: message.run_id,\n    assistant_id: message.assistant_id,\n    thread_id: message.thread_id,\n    attachments: message.attachments,\n    metadata: message.metadata,\n    runSteps: ((_message$runSteps = message.runSteps) !== null && _message$runSteps !== void 0 ? _message$runSteps : []).map((runStep) => serializeRunStep({\n      runStep\n    })),\n    status: message.status\n  };\n};\n\n// src/lib/threadIdStorage/key.ts\nvar key = (_ref) => {\n  var {\n    assistantId\n  } = _ref;\n  return \"superinterface-\".concat(assistantId, \"-threadId\");\n};\n\n// src/lib/streams/enqueueJson.ts\nvar enqueueJson = (_ref) => {\n  var {\n    controller,\n    value\n  } = _ref;\n  return controller.enqueue(new TextEncoder().encode(JSON.stringify(value)));\n};\nexport {\n  enqueueJson,\n  isOptimistic,\n  optimisticId,\n  serializeMessage,\n  key as threadIdStorageKey\n};\n","import { uid } from 'radash';\nexport var optimisticId = () => \"-\".concat(uid(24));","import _ from 'lodash';\nexport var isOptimistic = _ref => {\n  var {\n    id\n  } = _ref;\n  return _.startsWith(id, '-');\n};","import { pick } from 'radash';\nexport var serializeRunStep = _ref => {\n  var {\n    runStep\n  } = _ref;\n  return pick(runStep, ['id', 'run_id', 'step_details', 'completed_at', 'cancelled_at', 'failed_at', 'status']);\n};","import { serializeRunStep } from '@/lib/runSteps/serializeRunStep';\nexport var serializeMessage = _ref => {\n  var _message$runSteps;\n  var {\n    message\n  } = _ref;\n  return {\n    id: message.id,\n    role: message.role,\n    created_at: message.created_at,\n    content: message.content,\n    run_id: message.run_id,\n    assistant_id: message.assistant_id,\n    thread_id: message.thread_id,\n    attachments: message.attachments,\n    metadata: message.metadata,\n    runSteps: ((_message$runSteps = message.runSteps) !== null && _message$runSteps !== void 0 ? _message$runSteps : []).map(runStep => serializeRunStep({\n      runStep\n    })),\n    status: message.status\n  };\n};","export var key = _ref => {\n  var {\n    assistantId\n  } = _ref;\n  return \"superinterface-\".concat(assistantId, \"-threadId\");\n};","export var enqueueJson = _ref => {\n  var {\n    controller,\n    value\n  } = _ref;\n  return controller.enqueue(new TextEncoder().encode(JSON.stringify(value)));\n};"]}